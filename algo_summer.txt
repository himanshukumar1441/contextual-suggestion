step 1 : taking out all the description of the candidate suggestions( 30 for each user )
       i. used SIR_DESC ( gets description from the website when the url is provided )
      ii. using foursq. got the catagory + review of the candidate suggestion. ( was possible to get time slots but not used )
     iii. removing the sentences which contained words like browser,updated, etc.
      iv. taking out all the relevants words from the description, this includes removing of all stopwords,symbols( !@#$%^ etc ).
       v. finding the parts of speech for all the words and keeping only words which are noun, verb, adverb and adjective ( this was done using nltk python library ).
      vi. three steps for taking out desciption first is sir_desc, then foursq , then again sir_desc.
         
        
        
step 2 : Finding the tags of each candidate suggestion :
       i. see for_similarity_list.
      ii. the first element for a list for each tag is either 0/2 ( this just depends upon experimenting/observation ).
          if its 0, we will do direct word matching for both single word and bigrams.
          if its 2, the synset of tags, is matched to the synset words of the candidate suggestion description.
          the threshold set for matching was 0.95 and we used wup_similarity, again from nltk library.( threshold can be changed for better results ) 
     iii. in relation to ii. if there is a bigram in tags, bigram synset is taken from words of the candidate suggestion description.
      iv. so for each candidate suggestion
          all the tags were checked in the candidate suggestion description ,if any one matched that tag in appended in the list of that cand. sugg.
          a file is now generated for all the candidate suggestions containing their tags.

step 3 : giving rating to each candidate suggestion :
       a. Approach 1( RUN 1 ): all this process done for a single user
        i. a dictionary is prepared from all the rated attractions ,for each rating like;
           { 4 : [tags from a rated attraction with 4 rating],[ same here too ],[---],[---] ,
             3 : [--------------------------------- 3 ------],[same here too ] ,[---],
             same for other ratings also}
       ii. now a candidate is taken and matched with each list in each rating.
           now results came like this;
                   rating                   matched tags in a list
                     4                                5
                     3                                6
                     2                                6
                     1                                2
                     0                                3
           that candidate is given a rating of 3 with 6 matched tags.In case of collition higher rating is given.
      iii. similarly done for other 30 candidate desciption and a list is prepered containing candidate suggestion's ( ranking, number of matched tags )
           the list is sorted first on the basis of ranking, and then within each rank ,on the basis of number of tags matched.
       iv. if the matching of a cand. sugg.'s tags were 0 in all list then it was not added in our result.This resulted in 0 retrieved suggestions.
 
      b. Approach 2( RUN 2 ):  all this process done for a single user
       i. a dictionary is prepared containing a list for each rating  # 224 is the number of total tags
          { 0 : [0]*224 ,1 : [0]*224 , 2 : [0]*224 , 3 : [0]*224 , 4 : [0]*224 }
      ii. a rated attraction is taken , let its rating be 3, then in list corresponding to 3 rating, the count of tags which occured in that rated attraction is 
          incremented.
     iii. after all the rated attractions are processed, then list corresponding to each rating is normalised ,i.e.,count of each tag is divided by total number
          of count in that rating.Now sum of count all tags in a particular rating equals to 1.
      iv. now a candidate sugg. is taken its tags are matched to each rating list, such as
          if tags a,b,d occurs in cand. sugg., in each rating , its score is added and the rating with maximum score is given to that cand.
       v. if the matching of a cand. sugg.'s tags were 0 in all list then it was not added in our result.
          In case of collition higher rating is given.
      vi. the list is sorted first on the basis of ranking, and then within each rank ,on the basis of score obtained.
     vii. this RUN performed better because even if there are less number of rated attraction we had a matching system and each cand. matched to atleast some extent
          so number of retrieved sugg. may not be equal to 0.


the result was validated using the batch_validate file and submitted.
   

